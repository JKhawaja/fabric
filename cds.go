package fabric

// wrap data structure elements to become generic CDS Nodes
type Node interface {
	ID() int // returns node id
	Immutable() bool
}

type NodeList []Node

// NOTE: for undirected edges, choice of source and destination
//		are up to the developer.
type Edge interface {
	ID() int // returns edge id
	Source() Node
	Destination() Node
	Immutable() bool
}

type EdgeList []Edge

// add these methods to data structure objects to use as CDS
type CDS interface {
	CreateNodes() error  // traverse CDS and convert CDS elements into being "Nodes" (return new list of Nodes)
	CreateEdges() error  // use Nodes List generated by ListNodes() to add edges to list (return final edge list)
	ListNodes() NodeList // a simple `return MyCDS.Nodes` will suffice here; once a NodeList has been created
	ListEdges() EdgeList // a simple `return MyCDS.Edges` will suffice here; once an EdgesList has been created
}

/*
	// Ring satisfies the fabric CDS interface
	type Ring struct {
		Root Element
		Len  int
		Nodes fabric.NodeList
		Edges fabric.EdgeList
	}

	func NewRing() *Ring {
		return &Ring{}
	}

	func (r *Ring) CreateNodes() error {
		var nl fabric.NodeList
		// traverse list and wrap each element as an elementNode,
		// add edges to ElementNode with Ids
		// and return elementNode slice

		r.Nodes = nl

		return nil
	}

	func (r *Ring) CreateEdges() error {
		var el fabric.EdgeList

		nodes := r.Nodes

		// traverse NodeList add each Nodes edge to edge slice
		// check that edge slice does not already contain edge ID
		// return edge list.

		r.Edges = el

		return nil
	}

	func (r *Ring) ListNodes() fabric.NodeList {
		return r.Nodes
	}

	func (r *Ring) ListEdges() fabric.EdgeList {
		return r.Edges
	}

*/
