package fabric

// wrap data structure elements to become generic CDS Nodes
type Node interface {
	ID() int // returns node id
	Immutable() bool
}

type NodeList []Node

// NOTE: for undirected edges, choice of source and destination
//		are up to the developer.
type Edge interface {
	ID() int // returns edge id
	Source() Node
	Destination() Node
	Immutable() bool
}

type EdgeList []Edge

// add these methods to data structure objects to use as CDS
type CDS interface {
	CreateNodes() (NodeList, error)               // traverse CDS and convert CDS elements into being "Nodes" (return new list of Nodes)
	CreateEdges(nodes NodeList) (EdgeList, error) // use Nodes List generated by ListNodes() to add edges to list (return final edge list)
	ListNodes() NodeList                          // a simple `return MyCDS.Nodes` will suffice here; once a NodeList has been created
	ListEdges() EdgeList                          // a simple `return MyCDS.Edges` will suffice here; once an EdgesList has been created
}
