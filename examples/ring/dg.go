package ring

import (
	"github.com/JKhawaja/fabric"
)

/* Single-UI Dependency Graph code */

// TODO: This code is about defining what a UI, VUI, and Temporal object would look like
// these are the objects that are assigned to goroutines/threads in any system
// that we build and use this ring package.

type DGNode struct {
	Id               int
	Signalers        []chan fabric.Signal
	AccessProcedures fabric.ProcedureList
	Dependents       []fabric.DGNode
	Dependencies     []fabric.DGNode
	Signals          []<-chan fabric.Signal
}

type RingUI struct {
	DGNode
	Section fabric.Section
	Unique  bool
	Virtual bool
}

// NOTE: the dependents and dependencies for a UI node
//		can be determined by the Graph methods: Dependents()
//		and Dependencies().
func NewRingUI() *RingUI {
	// TODO: have to decide how to set up a Ring UI ...
	// Inputs:
	//		Section
	//		Unique & Virtual boolean
	//		ProceduresList

	return &RingUI{}
}

func (r *RingUI) ID() int {
	return r.Id
}

func (r *RingUI) ListSignalingChannels() []chan fabric.Signal {
	return r.Signalers
}

func (r *RingUI) GetPriority() int {
	// Example: could caclulate priority based on
	// priorities assigned to procedures in procedures list ...
	// Priority is used to
	p := len(r.AccessProcedures)
	return p
}

func (r *RingUI) ListProcedures() fabric.ProcedureList {
	return r.AccessProcedures
}

func (r *RingUI) ListDependents() []fabric.DGNode {
	return r.ListDependents()
}

func (r *RingUI) ListDependencies() []fabric.DGNode {
	return r.ListDependencies()
}

func (r *RingUI) ListSignals() []<-chan fabric.Signal {
	return r.Signals
}

func (r *RingUI) GetSection() fabric.Section {
	return r.Section
}

func (r *RingUI) IsUnique() bool {
	return r.Unique
}

func (r *RingUI) IsVirtual() bool {
	return r.Virtual
}

// Autogenerated
func (r *RingUI) Type() fabric.NodeType {

	var i interface{} = r
	j, ok := i.(fabric.UI)
	if ok {
		if j.IsVirtual() {
			return fabric.VUINode
		}
		return fabric.UINode
	}
	k, ok := i.(fabric.Temporal)
	if ok {
		if k.IsVirtual() {
			return fabric.VirtualTemporalNode
		}
		return fabric.TemporalNode
	}
	_, ok = i.(fabric.Virtual)
	if ok {
		return fabric.VirtualNode
	}

	return fabric.Unknown
}

// Autogenerated (not in interface definition)
func (r *RingUI) SignalArrayLength() int {
	return len(r.ListDependents())
}

// Autogenerated
func (r *RingUI) IsRootBoundary() bool {
	if len(r.ListDependents()) == 0 {
		return true
	}

	return false
}

// Autogenerated
func (r *RingUI) IsLeafBoundary() bool {
	if len(r.ListDependencies()) == 0 {
		return true
	}

	return false
}
